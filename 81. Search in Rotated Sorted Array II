class Solution {
public:
    int pivotNo(vector<int>&nums){
        int s = 0;
        int e = nums.size()-1;
        int mid;
        while(s<e){
            mid = s + (e-s)/2;
            if(nums[s]<=nums[mid]){
                s= mid +1;
            }
            else{
                e = mid;
            }
        }
        return s;
    }
    
    bool binarySearch(vector<int>&nums,int s,int e,int target){
        
        int mid;
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid] == target){
                return true;
            }
            else if(nums[mid]<target){
                s = mid +1;
            }
            else{
                e = mid -1;
            }
        }
        return false;
    }
    
    
    bool search(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int pivot = pivotNo(nums);
        bool ans;
        if(nums[pivot]<=target && target<=nums[nums.size()-1]){
          ans= binarySearch(nums,pivot,nums.size()-1,target); 
        }
        else
           ans= binarySearch(nums,0,pivot-1,target);
        return ans;
    }
};
