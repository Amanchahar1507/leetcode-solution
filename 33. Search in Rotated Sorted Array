class Solution {
public:
   
    int pivotno(vector<int>&nums){
        int s = 0;
        int e = nums.size()-1;
        int mid;
        while(s<e){
            mid = s + (e-s)/2;
            if(nums[mid]>=nums[0]){
                s = mid + 1;
            }
            else {
                e = mid;
            }
        }
        //int k = s;
        return s;
    }
    int binarysearch(vector<int>&nums,int s,int e,int target){
        int mid;
        while(s<=e){
            mid = s + (e-s)/2;
            if(nums[mid]==target){
                // cout<<mid<<" ";
                return mid;
            }
            else if(nums[mid]<target){
                s = mid +1;
            }
            else{
                e = mid -1;
            }
        }
        return -1;
    }
 int search(vector<int>& nums, int target) {
//     int s = 0;
//     int e = nums.size()-1;
//     int mid;
//     while(s<=e){
//         mid = s + (e-s)/2;
//         if(nums[mid]==target) return mid;
        
//         else if(nums[s]<=nums[mid]){
//             if(target>=nums[s] && target<nums[mid]){
//                 e= mid-1;
//             }
//             else{
//                 s = mid +1;
//             }
            
//         }
//         else{
//             if(target<=nums[e] && target>nums[mid]){
//                 s = mid +1;
//             }
//             else
//             {
//                 e = mid-1 ;
//             }
//         }
        
//     }
//     return -1;
         int pivot = pivotno(nums);
        int s= 0;
        int e= nums.size()-1;
     // cout<<pivot<<" ";
     
        if(target<=nums[e] && target>=nums[pivot]){
           return binarysearch(nums,pivot,e,target);
       } 
        else{
            return binarysearch(nums,0,pivot-1,target);
        }
     //return target;
    }
    
   
    
    
    //code here

};
